-> DAO can be implemented by :
	- ORM - Object Relational Mapping (Ex. Hibernate, OpenJPA)
	- JDBC

- JPA 	- specification - standard interfaces are provided by java
	- provides interfaces for DAO
	- Hibernate is implementation of JPA
	- Some implementations of JPA include - Eclipse link, Hibernate, Top Link, OpenJPA

-> ORM	- helps in mapping user data with database
	- when connecting application using jdbc, then:
		1) the driver has to be loaded
		2) establish the connection
		3) create a statement
		4) execute the statement
		5) store the data in a resultset
		6) process the resultset
		7) show the data to end user
	- boilerplate code (steps repeated everytime in jdbc)
	- it can be omitted usigng ORM
	- can be done in 2 ways - XML
				- annotations
	- @Entity required on top of bean class (Persistence Class)
		- will search for the same name of bean class in db
		- will map the fields in the class with the column names in the db
	- @Table(name="Student") - used to annotate class with database table name
	- @Id - will refer same name in column and assign with primary key

	- JPA contains a persistence.xml file that acts as a config file for JPA application
	- persistence.xml should be present in META-INF folder
	- META-INF should be present in a folder that is in build path

- Persistence.createEntityManagerFactory(persistenceUnitName [in persistenc.xml]) - returns instance of "EntityManagerFactory"
  (class)	(static method)
- EntityManager entityManager=factory.createEntityManager(); - gives entity manager, responsible for managing life cycle of the object

-> Persistence ------> EntityManagerFactory -------> EntityManager -----> EntityObject
				|						|
			     StudentDB-------------------------------------------
manages life cycle of object
-> EntityManager connects to database using EntityManagerInstance

- entityManager.persist(student); - save in a database

- <property name="hibernate.show_sql" value="true" />	- show sql query in console everytime its executed
- entityManager.find(Student.class,student.getRollNumber());
		    (type of object) (primary key)
- Transaction is required for DML queries

----------------------------------------------------------

Entity Life Cycle States:
1) New state		: does not contain any persistent identity(Primary key) or context(record)
2) Managed/Attached 	: moves from new to managed when we call persist() method of EntityManager
			  - stay attached to DB
			  - entity will have PI and PC
			  - changes made to attach entity will reflect to database also
			  - on calling find() method , it will return the attached object
3) Removed		: remove the persistence identity as well as the persistence context
			  - remove everything from DB
			  - will not remove data from Java object
4) Detached 		: clear(), close() method detaches the entity class object with the database
			  - EntityManager.clear() - the associated entity with that entity manager, the state of all those entities will detach

-> JPQL 					SQL
- Java Persistence Query Language		- Structued Query Language
- queries on entities				- queries on table
- from Student					- select * from student
	(entity name)						(table name)
- case sensitive in terms of entity 		- case insensitive in terms of table
  names and field names				  and column names
- select, from, groupby, orderby,
  having and where, all clauses are
  available and are not case sensitive
- select s from student s
- * is not a valid identifier in EntityManager Query

-> select s from student s
   where s.rollNumber = 10;
	   (field name)


-> Query interface 	- in javax.persistence package - perform all possible queries
-> TypedQuery interface	- specially to execute select query

Query query = entityManager.createQuery("From Student");// get every thing from student table
List<Student> studentList = query.getResultList();	// returns List of Objects
- to execute select query, we use getResultList()
		query.executeUpdate() - to update values in database
-> TypedQuery - typesafe
-> Query - note type safe - can give ClassCastException at runtime

---------------------------------------------------------
-> Association
- having a reference of object of one class in another class will relate them in Java
- PK and FK will relate tables in DB

- One to One 	- @OneToOne used in parent Class to recognise it - make the column as foreign key
		- name of foreign key column - ForrignkeyColumn_primarykey Ex: address_addressId
		- done implicitly by JPA
		@JoinColumn(name="addressId") - rename forrign key column name
		- if address reference is created inside student entity
		  such a relationship is called unidirectional relationship
		- in a unidirectional relationship, foreign key is always
		  created in the table that includes reference
		- default name of foerign key column will be "referenceName_primarykey of address column"
		  Ex: address_addressId
		- to override the default name, use @JoinColumn(name="koi naam") 
		  where the @OneToOne annotation exists

H.W:	Read: 	- One to One Bi-Directional
		- Angular Forms

- One to Many - 
- Many to Many
